import {
    parseActionMetadataFromFile,
    processActionMetadataTemplateFile,
    createTypeScriptDefinitionForActionMetadata,
    createModuleLoaderTypeScriptDefinitionForActionMetadata,
} from "@/utils/actions/action-metadata";

import { SPLIT_BY_WORDS_AND_GROUP_ACTION_PARAMETER_PATH_PARSER } from "@/utils/actions/action-parameter-path-parser";
import { WINDOWS_NEWLINE } from "@/utils/environment";
import { FileNotFoundError } from "@/utils/errors";
import { TypeScriptDocument } from "@/utils/typescript";
import { basename } from "node:path";

const ACTION_METADATA_TEMPLATE_FILE = "./action.template.yml";
const ACTION_METADATA_FILE = "./action.yml";
const ACTION_METADATA_TYPESCRIPT_DEFINITION_FILE = "./src/action.ts";
const DYNAMIC_MODULE_LOADER_FILE = "./src/utils/reflection/module-loader.g.ts";

const OPTIONS: PrebuildOptions = {
    sourceFileName: basename(ACTION_METADATA_TEMPLATE_FILE),
    encoding: "utf8",
    disableESLint: true,
    generateAutoGeneratedWarningMessage: true,
    removeTemplateOnlyFields: true,
    rootPath: "@/",
    pathParser: SPLIT_BY_WORDS_AND_GROUP_ACTION_PARAMETER_PATH_PARSER,
    newline: WINDOWS_NEWLINE,
    tabSize: 4,
    lineWidth: 80,
};

type PrebuildOptions = Exclude<
    & Parameters<typeof processActionMetadataTemplateFile>[2]
    & Parameters<typeof parseActionMetadataFromFile>[1]
    & Parameters<typeof createTypeScriptDefinitionForActionMetadata>[1]
    & Parameters<typeof createModuleLoaderTypeScriptDefinitionForActionMetadata>[1]
    & Parameters<TypeScriptDocument["save"]>[1],
    string
>;

FileNotFoundError.throwIfNotFound(ACTION_METADATA_TEMPLATE_FILE);

await processActionMetadataTemplateFile(
    ACTION_METADATA_TEMPLATE_FILE,
    ACTION_METADATA_FILE,
    OPTIONS
);

const metadata = await parseActionMetadataFromFile(ACTION_METADATA_FILE, OPTIONS);

const metadataTypeScriptDefinition = createTypeScriptDefinitionForActionMetadata(metadata, OPTIONS);
await metadataTypeScriptDefinition.save(ACTION_METADATA_TYPESCRIPT_DEFINITION_FILE, OPTIONS);

const moduleLoaderTypeScriptDefinition = createModuleLoaderTypeScriptDefinitionForActionMetadata(metadata, OPTIONS);
await moduleLoaderTypeScriptDefinition.save(DYNAMIC_MODULE_LOADER_FILE, OPTIONS);
